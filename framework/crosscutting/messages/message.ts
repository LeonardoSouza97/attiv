const messages = {
  all: {
    METHOD_NOT_IMPLEMENTED: 'METHOD NOT IMPLEMENTED',
  },
  errorHandler: {
    NOT_FOUND: 'NOT FOUND',
    UNAUTHENTICATED: 'UNAUTHENTICATED',
    SERVER_ERROR: 'SERVER ERROR',
    VALIDATION_ERROR: 'VALIDATION ERROR',
    BUSINESS_ERROR: 'BUSINESS ERROR',
    API_ERROR: 'API ERROR',
  },
  successHandler: {
    SUCCESS: 'SUCCESS',
  },
  responseHandler: {
    EXIST_TRANSACTION_OPEN: 'THERE IS OPEN TRANSACTION',
  },
  DbContexto: {
    NOT_TRANSACTION: 'NO TRANSACTION OPEN',
  },
  RepositoryGeneric: {
    COLUMN_NOT_EXIST: 'COLUMN NOT EXIST',
  },
  Filter: {
    VALUE_IS_NULL: 'FILTER QUERY IS NULL',
  },
  RabbitMQ: {
    CONNECTION_FAILED: 'ERROR CONNECT RABBITMQ',
    MESSAGE_SUCCESS: 'MESSAGE SUCCESS RABBITMQ',
    MESSAGE_ERROR: 'MESSAGE ERROR RABBITMQ',
    MESSAGE_SEND: 'MESSAGE SEND TO RABBITMQ',
  },
  SQS: {
    CONNECTION_FAILED: 'ERROR CONNECT SQS',
    MESSAGE_SUCCESS: 'MESSAGE SUCCESS SQS',
    MESSAGE_ERROR: 'MESSAGE ERROR SQS',
    MESSAGE_ERROR_SEND: 'MESSAGE ERROR SEND TO SQS',
    MESSAGE_SEND: 'MESSAGE SEND TO SQS',
    MESSAGE_ERROR_INIT: 'MUST CALL INIT(...) FIRST',
    MESSAGE_ERROR_CREATE_QUEUE: 'ERRO CREATE QUEUE',
    MESSAGE_CREATE_QUEUE: 'CREATE QUEUE SUCCESS',
    MESSAGE_LISTENER_QUEUE: 'LISTENER QUEUE SUCCESS',
    MESSAGE_ERROR_FIND_QUEUE: 'UNABLE TO FIND SQS QUEUE',
    MESSAGE_PROCESS: 'PROCESS MESSAGE',
  },
  BASE_QUEUES: {
    MESSAGE_SUCCESS: 'MESSAGE SUCCESS BASE',
    MESSAGE_ERROR: 'MESSAGE ERROR BASE',
    MESSAGE_SEND: 'MESSAGE SEND TO BASE',
  },
};

export default messages;
